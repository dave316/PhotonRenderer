#version 460 core

struct ModelData
{
	mat4 M;
	mat4 N;
	int animationMode; // 0 - no animation, 1 - vertex skinning, 2 - morph targets
};

layout(std140, binding = 2) uniform ModelUBO
{
	ModelData model;
};

layout(std430, binding = 5) buffer CellSSB
{
	vec4 cellData[];
} cellBuffer;

#include "Utils.glsl"
#include "Camera.glsl"
#include "IBL.glsl"
#include "Light.glsl"


layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba16f, binding = 0) uniform image3D inScatteringTex;

float g_HenyeyGreenstein(float cosPhi, float phase)
{
	float g = phase;
	float g2 =  g * g;
	return (1.0 - g2) / (4.0 * PI * pow(1.0 + g2 - (2.0 * g) * cosPhi, 1.5));
}

uniform	vec3 scattering = vec3(1.0);
uniform float absorption = 0.0;
uniform float phase = 0;
uniform sampler3D fogMaterialTex;
uniform float deltaTime = 0.0;

vec3 lineZPlaneIntersection(vec3 a, vec3 b, float zDistance)
{
	vec3 normal = vec3(0,0,1);
	vec3 line = b - a;
	float t = (zDistance - dot(normal, a)) / dot(normal, line);
	return a + t * line;
}

void main()
{
	ivec3 globalIndex = ivec3(gl_WorkGroupID.xyz);

	vec3 eye = vec3(0);
	float zNear = camera.zNear;
	float zFar = camera.zFar;

	vec2 pointNDC = (vec2(globalIndex.xy) + vec2(0.5)) / vec2(gl_NumWorkGroups.xy); // normalized coords [0..1]
	vec4 pointClip = vec4(pointNDC * 2.0 - 1.0, -1.0, 1.0);
	vec4 pointView = camera.P_I * pointClip; // inverse projection -> view space
	pointView /= pointView.w; // perspective divide

	float tNear = -zNear * pow(zFar / zNear, float(globalIndex.z) / float(gl_NumWorkGroups.z));
	float tFar = -zNear * pow(zFar / zNear, float(globalIndex.z + 1) / float(gl_NumWorkGroups.z));

	vec3 pNear = lineZPlaneIntersection(eye, pointView.xyz, tNear);
	vec3 pFar = lineZPlaneIntersection(eye, pointView.xyz, tFar);
	float s = distance(pFar, pNear);
	vec3 center = (pFar + pNear) / 2.0;

	vec3 wPosition = vec3(camera.V_I * vec4(center, 1.0)); // inverse view -> world space
	vec3 viewVec = camera.position - wPosition;
	vec3 viewDir = normalize(viewVec);

	float minHeight = 0.0;
	float maxHeight = 2.0;
	float noise = texture(fogMaterialTex, wPosition * 0.1 + vec3(deltaTime * 0.05,0,0)).r;
	//float fog = ((maxHeight - wPosition.y) / (maxHeight - minHeight));
	float fog = clamp(exp(-maxHeight * wPosition.y), 0.0, 1.0);
//	float scatterFog = (wPosition.y < 2.0 ? (2.0 - wPosition.y) : 0.0) * 5.0;
//	float absorb = (wPosition.y < 2.0 ? (2.0 - wPosition.y) : 0.0) * 1.0;

	//fog = wPosition.y < 1.0 + noise ? fog : 0.0;

	//vec3 scatterColor = vec3(0.8, 0.8, 1.0);
	vec3 scatterColor = vec3(1.0);
	vec3 scatterFog = fog * scatterColor * 5.0 * noise;
	float absorptionFog = fog * 1.0;
	
	float extinction = max(max3(scatterFog) + absorptionFog, 0.000000001);
	vec3 Li = vec3(0);
	//if(extinction > 0.0)
	{
		//Li = scatterFog * texture(irradianceMaps, vec4(viewDir,0)).rgb; // TODO: index;

		for(int i = 0; i < numLights; i++)
		{
			Light light = lights[i];

			vec3 viewVec = camera.position - wPosition;
			vec3 lightVec = light.position - wPosition;

			float visibility = 1.0;
			if(light.type == 0)
			{
				vec3 lightVec = -light.direction;
				float lightDist = 1.0;
				vec3 l = normalize(lightVec);
				vec3 v = normalize(viewVec);
				
				vec4 vPosition = camera.V * vec4(wPosition, 1.0);
				float depth = abs(vPosition.z);
				int layer = -1;
				for (int c = 0; c < cascadeCount; c++)
				{
					if(depth < cascadePlaneDistance[c])
					{
						layer = c;
						break;
					}
				}
				if(layer == -1)
					layer = cascadeCount;
		
				vec4 lPosition = lightSpaceMatrices[layer] * vec4(wPosition, 1.0);
				vec3 projCoords = lPosition.xyz / lPosition.w;
				projCoords = projCoords * 0.5 + 0.5;
				float shadowDepth = texture(shadowCascades, vec3(projCoords.xy, layer)).r;
				float shadow = 0.0;
				vec2 texelSize = 1.0 / vec2(textureSize(shadowCascades, 0));
				for (int x = -1; x <= 1; x++)
				{
					for (int y = -1; y <= 1; y++)
					{
						float depth = texture(shadowCascades, vec3(projCoords.xy + vec2(x, y) * texelSize, layer)).r;
						shadow += (projCoords.z) > depth ? 1.0 : 0.0;
					}
				}
				visibility = 1.0 - shadow / 9.0;

				vec3 lightIntensity = light.color * light.intensity;
				float g = g_HenyeyGreenstein(dot(v, l), phase);
				vec3 Lin = exp(-lightDist * absorption) * visibility * lightIntensity * getAttenuation(light, lightVec);
				//vec3 Lin = visibility * lightIntensity * getAttenuation(light, lightVec);
				Li += Lin * scatterFog * g;
			}
			else
			{
				float lightDist = length(lightVec);
				vec3 l = lightVec / lightDist;
				vec3 v = normalize(viewVec);

				float zValue = float(globalIndex.z) / float(gl_NumWorkGroups.z);
				vec3 f = -lightVec;
				float bias = 0.0001;
				float depth = (lightDist / light.range) - bias; // TODO: add to light properties
				float shadow = 0.0;
				float radius = zValue * 0.1;
				for (int x = -1; x <= 1; x++)
				{
					for (int y = -1; y <= 1; y++)
					{
						for (int z = -1; z <= 1; z++)
						{
							vec3 offset = vec3(x, y, z);
							vec3 uvw = f + offset * radius;
							shadow += texture(shadowMaps, vec4(uvw, i), depth);
						}
					}
				}
				visibility = shadow / 27.0;
				//visibility = texture(shadowMaps, vec4(f, i), depth);

				vec3 lightIntensity = light.color * light.intensity;
				float g = g_HenyeyGreenstein(dot(v, l), phase);
				//vec3 Lin = exp(-lightDist * absorption) * visibility * lightIntensity * getAttenuation(light, lightVec);
				vec3 Lin = visibility * lightIntensity * getAttenuation(light, lightVec) * scatterFog * g;
				vec3 Sint = (Lin - Lin * exp(-extinction * s)) / extinction;
				Li += Sint;
				//Li += Lin * scatterFog * g;
				//Li += scatterFog * g * visibility * lightIntensity * getAttenuation(light, lightVec);
			}		
		}

//		vec4 Li_prev = imageLoad(inScatteringTex, globalIndex);
//		Li = mix(Li, Li_prev.rgb, 0.1);
	}

	imageStore(inScatteringTex, globalIndex, vec4(Li, extinction));
}