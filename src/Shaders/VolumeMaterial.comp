#version 460 core

struct ModelData
{
	mat4 M;
	mat4 N;
	int animationMode; // 0 - no animation, 1 - vertex skinning, 2 - morph targets
};

layout(std140, binding = 2) uniform ModelUBO
{
	ModelData model;
};


#include "Utils.glsl"
#include "Camera.glsl"
#include "IBL.glsl"
#include "Light.glsl"


layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba16f, binding = 0) uniform image3D inScatteringTex;

float g_HenyeyGreenstein(float cosPhi, float phase)
{
	float g = phase;
	float g2 =  g * g;
	return (1.0 - g2) / (4.0 * PI * pow(1.0 + g2 - (2.0 * g) * cosPhi, 1.5));
}

uniform	vec3 scattering = vec3(1.0);
uniform float absorption = 0.1;
uniform float phase = 0;
uniform sampler3D fogMaterialTex;
uniform float deltaTime = 0.0;

vec3 lineZPlaneIntersection(vec3 a, vec3 b, float zDistance)
{
	vec3 normal = vec3(0,0,1);
	vec3 line = b - a;
	float t = (zDistance - dot(normal, a)) / dot(normal, line);
	return a + t * line;
}

void main()
{
	ivec3 globalIndex = ivec3(gl_WorkGroupID.xyz);
//	vec2 xi = Hammersley(globalIndex.x, 128);
//	vec2 yi = Hammersley(globalIndex.y, 128);
//	vec2 zi = Hammersley(globalIndex.z, 512);
//	vec3 jitter = vec3(xi.y,yi.y,zi.y);

//	vec3 normCoords = vec3(globalIndex) / vec3(gl_NumWorkGroups); // normalized coords [0..1]
//	vec4 clipCoords = vec4(normCoords.xyz * 2.0 - 1.0, 1.0); // convert to clip space [-1..1]
//	vec4 viewCoords = camera.P_I * clipCoords; // inverse projection -> view space
//	viewCoords /= viewCoords.w; // perspective divide
//	float zNear = camera.zNear;
//	float zFar = camera.zFar;
//	//viewCoords.z = -zNear * pow(zFar / zNear, normCoords.z);
//	vec3 wPosition = vec3(camera.V_I * vec4(viewCoords.xyz,1.0)); // inverse view -> world space

	vec3 eye = vec3(0);
	float zNear = camera.zNear;
	float zFar = camera.zFar;

	vec4 minPointNDC = vec4(vec2(globalIndex.xy) / vec2(gl_NumWorkGroups.xy), -1.0, 1.0); // normalized coords [0..1]
	vec4 maxPointNDC = vec4(vec2(globalIndex.xy + ivec2(1)) / vec2(gl_NumWorkGroups.xy), -1.0, 1.0); // normalized coords [0..1]

	vec4 minPointClip = vec4(minPointNDC.xy * 2.0 - 1.0, -1.0, 1.0);
	vec4 maxPointClip = vec4(maxPointNDC.xy * 2.0 - 1.0, -1.0, 1.0);

	vec4 minPointView = camera.P_I * minPointClip; // inverse projection -> view space
	vec4 maxPointView = camera.P_I * maxPointClip; // inverse projection -> view space
	minPointView /= minPointView.w; // perspective divide
	maxPointView /= maxPointView.w; // perspective divide

	float tNear = -zNear * pow(zFar / zNear, float(globalIndex.z) / float(gl_NumWorkGroups.z));
	float tFar = -zNear * pow(zFar / zNear, float(globalIndex.z + 1) / float(gl_NumWorkGroups.z));

	vec3 minNear = lineZPlaneIntersection(eye, minPointView.xyz, tNear);
	vec3 minFar = lineZPlaneIntersection(eye, minPointView.xyz, tFar);
	vec3 maxNear = lineZPlaneIntersection(eye, maxPointView.xyz, tNear);
	vec3 maxFar = lineZPlaneIntersection(eye, maxPointView.xyz, tFar);

	vec3 centerNear = (maxNear + minNear) / 2.0;
	vec3 centerFar = (maxFar + minFar) / 2.0;
	vec3 center = (centerFar + centerNear) / 2.0;

	vec3 wPosition = vec3(camera.V_I * vec4(center, 1.0)); // inverse view -> world space

	float scatterFog = texture(fogMaterialTex, wPosition * 0.2 + vec3(0,0,deltaTime * 0.15)).r;

	Light light = lights[0];

	vec3 viewVec = camera.position - wPosition;
	vec3 viewDir = normalize(viewVec);

	float d = length(light.position - wPosition);
//	float zValue = float(globalIndex.z) / float(gl_NumWorkGroups.z);
//	vec3 f = wPosition - light.position;
//	float len = length(f);
//	float depth = (len / light.range) - 0.0001; // TODO: add to light properties
//	float shadow = 0.0;
//	float radius = zValue * 0.1;
//	for (int x = -1; x <= 1; x++)
//	{
//		for (int y = -1; y <= 1; y++)
//		{
//			for (int z = -1; z <= 1; z++)
//			{
//				vec3 offset = vec3(x, y, z);
//				vec3 uvw = f + offset * radius;
//				shadow += texture(shadowMaps[0], vec4(uvw, depth));
//			}
//		}
//	}
	float visibility = 1.0;//shadow / 27.0;
	//float visibility = texture(shadowMaps[0], vec4(f, depth));

//	float d = 1.0;
//	vec4 vPosition = camera.V * vec4(wPosition, 1.0);
//	float depth = abs(vPosition.z);
//	int layer = -1;
//	for (int c = 0; c < cascadeCount; c++)
//	{
//		if(depth < cascadePlaneDistance[c])
//		{
//			layer = c;
//			break;
//		}
//	}
//	if(layer == -1)
//		layer = cascadeCount;
//
//	vec4 lPosition = lightSpaceMatrices[layer] * vec4(wPosition, 1.0);
//	vec3 projCoords = lPosition.xyz / lPosition.w;
//	projCoords = projCoords * 0.5 + 0.5;
//	float shadowDepth = texture(shadowCascades, vec3(projCoords.xy, layer)).r;
////	float shadow = 0.0;
////	vec2 texelSize = 1.0 / vec2(textureSize(shadowCascades, 0));
////	for (int x = -2; x <= 2; x++)
////	{
////		for (int y = -2; y <= 2; y++)
////		{
////			float depth = texture(shadowCascades, vec3(projCoords.xy + vec2(x, y) * texelSize, layer)).r;
////			shadow += (projCoords.z) > depth ? 1.0 : 0.0;
////		}
////	}
//	//float visibility = 1.0 - shadow / 25.0;
//	float visibility = float(projCoords.z < shadowDepth);

//	vec4 accum = vec4(0);
//	accum += exp(textureGather(shadowCascades, vec3(projCoords.xy, layer), 0) * 80.0);
//	accum += exp(textureGather(shadowCascades, vec3(projCoords.xy + vec2(2,0), layer), 0) * 80.0);
//	accum += exp(textureGather(shadowCascades, vec3(projCoords.xy + vec2(0,2), layer), 0) * 80.0);
//	accum += exp(textureGather(shadowCascades, vec3(projCoo rds.xy + vec2(2,2), layer), 0) * 80.0);
//	float outShadow = dot(accum, vec4(1.0 / 16.0));
//	float receiver = exp(projCoords.z * 80.0);
//	float visibility = saturate(outShadow / receiver);

	vec3 Li = vec3(0);
	//Li = scatterFog * texture(irradianceMaps, vec4(viewDir,0)).rgb; // TODO: index;

	vec3 lightIntensity = light.color * light.intensity;
	float g = g_HenyeyGreenstein(dot(viewDir, normalize(light.position - wPosition)), phase);
	vec3 Lin = exp(-d * absorption) * visibility * lightIntensity * getAttenuation(light, light.position - wPosition);
	Li += Lin * absorption * scatterFog * g;

	vec4 Li_prev = imageLoad(inScatteringTex, globalIndex);
	Li = mix(Li, Li_prev.rgb, 0.1);

	imageStore(inScatteringTex, globalIndex, vec4(Li, 1.0));
}