#version 450 core

#define MAX_LIGHTS 2
#define LIGHT_RADIUS 600.0f// move to light struct and calculate based on attenuation

struct PointLight
{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float power;
	float constant;
	float linear;
	float quadratic;
	bool castShadow;
	bool on;
};

//layout(std430, binding = 0) readonly buffer LightBuffer
//{
//	PointLight lightData[];
//} lightBuffer;

uniform samplerCubeShadow shadowMaps[MAX_LIGHTS];

layout(std140, binding = 1) uniform PointLightUBO
{
	PointLight lights[MAX_LIGHTS];
};

struct VisibleIndex
{
	int index;
};

layout(std430, binding = 0) readonly buffer LightBuffer
{
	PointLight lightData[];
} lightBuffer;

layout(std430, binding = 1) writeonly buffer VisibleLightIndicesBuffer
{
	VisibleIndex cullingData[];
} visibleLightIndicesBuffer;

uniform sampler2D depthMap;
uniform mat4 view;
uniform mat4 projection;
uniform ivec2 screenSize;
uniform int numLights;

shared uint minDepthInt;
shared uint maxDepthInt;
shared uint visibleLightCount;
shared vec4 frustrumPlanes[6];
shared int visibleLightIndices[MAX_LIGHTS];
shared mat4 viewProjection;

#define TILE_SIZE 16
layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE, local_size_z = 1) in;

void main()
{
	ivec2 location = ivec2(gl_GlobalInvocationID.xy);
	ivec2 itemID = ivec2(gl_LocalInvocationID.xy);
	ivec2 tileID = ivec2(gl_WorkGroupID.xy);
	ivec2 tileNumber  = ivec2(gl_NumWorkGroups.xy);
	uint index = tileID.y * tileNumber.x + tileID.x;

	if(gl_LocalInvocationIndex == 0)
	{
		minDepthInt = 0xFFFFFFFF;
		maxDepthInt = 0;
		visibleLightCount = 0;
		viewProjection = projection * view;
	}

	barrier();

	float maxDepth, minDepth;
	vec2 uv = vec2(location) / vec2(screenSize);
	float depth = texture(depthMap, uv).r;
	depth = (0.5 * projection[3][2]) / (depth + 0.5 * projection[2][2] - 0.5);
	uint depthInt = floatBitsToUint(depth);
	atomicMin(minDepthInt, depthInt);
	atomicMax(maxDepthInt, depthInt);

	if(gl_LocalInvocationIndex == 0)
	{
		minDepth = uintBitsToFloat(minDepthInt);
		maxDepth = uintBitsToFloat(maxDepthInt);
		vec2 negativeStep = (2.0 * vec2(tileID)) / vec2(tileNumber);
		vec2 positiveStep = (2.0 * vec2(tileID + ivec2(1, 1))) / vec2(tileNumber);

		frustrumPlanes[0] = vec4(1.0, 0.0, 0.0, 1.0 - negativeStep.x);
		frustrumPlanes[1] = vec4(-1.0, 0.0, 0.0, -1.0 + positiveStep.x);
		frustrumPlanes[2] = vec4(0.0, 1.0, 0.0, 1.0 - negativeStep.y);
		frustrumPlanes[3] = vec4(0.0, -1.0, 0.0, -1.0 + positiveStep.y);
		frustrumPlanes[4] = vec4(0.0, 0.0, -1.0, -minDepth);
		frustrumPlanes[5] = vec4(0.0, 0.0, 1.0, maxDepth);

		for(uint i = 0; i < 4; i++)
		{
			frustrumPlanes[i] *= viewProjection;
			frustrumPlanes[i] /= length(frustrumPlanes[i].xyz);
		}

		frustrumPlanes[4] *= view;
		frustrumPlanes[4] /= length(frustrumPlanes[4].xyz);
		frustrumPlanes[5] *= view;
		frustrumPlanes[5] /= length(frustrumPlanes[5].xyz);
	}

	barrier();

	uint threadCount = TILE_SIZE * TILE_SIZE;
	uint passCount = (numLights + threadCount - 1) / threadCount;
	for(uint i = 0; i < passCount; i++)
	{
		uint lightIndex = i * threadCount + gl_LocalInvocationIndex;
		if(lightIndex >= numLights)
		{
			break;
		}

		vec4 position = vec4(lightBuffer.lightData[lightIndex].position, 1.0);

		float dist = 0.0;
		for(uint j = 0; j < 6; j++)
		{
			dist = dot(position, frustrumPlanes[j]) + LIGHT_RADIUS + 0.0001;
			if(dist <= 0.0)
				break;
		}

		if(dist > 0.0)
		{
			uint offset = atomicAdd(visibleLightCount, 1);
			visibleLightIndices[offset] = int(lightIndex);
		}
	}

	barrier();
	
	if(gl_LocalInvocationIndex == 0)
	{
		uint offset = index * MAX_LIGHTS;
		for(uint i = 0; i < visibleLightCount; i++)
		{
			visibleLightIndicesBuffer.cullingData[offset + i].index = visibleLightIndices[i];
		}

		if(visibleLightCount != MAX_LIGHTS)
		{
			visibleLightIndicesBuffer.cullingData[offset + visibleLightCount].index = -1;
		}
	}

}